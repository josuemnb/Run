// VERY IMPORTANT
// DO NOT CHANGE THIS FILE

using system
using primitives

//@native(char)
@array(i8)
type string {

	var value:i8[]
	var size:i32

//	property size:i32 {
//		get {
//			var	m_size = 0
//			for ;this[m_size];m_size++ { }
//			return m_size
//		}
//	}

	this {
	}

	this(sz:i32) {
		value = new i8[sz + 1]
		value[sz] = 0
		size = sz
	}

	this(s:string) {
		size = s.size
		value = new i8[size + 1]
		value[size] = 0
		copy(value as pointer,s.value as pointer,size)
	}

	property empty:bool => size == 0

	func indexOf(s:string):i32 => indexOf(s,0)

	func indexOf(s:string, start:i32):i32 {
		for var i=start;i<size - s.size;i++ {
			if s.value[0]!=value[i] => continue
			if s.size == 1 => return i
			var found = true
			for var l=1;l<s.size;l++ {
				if s.value[l]!=value[i + l] {
					found = false
					break
				}
			}
			if found => return i
		}
		return -1
	}

	func lastIndexOf(s:string, start:i32): i32 {
		if start > size => start = size
		for var i = start; i >= 0; i-- {
			if s.value[0] != value[i] => continue
			if s.size == 1 => return i
			var found = true
			for var l=1; l < s.size; l++ {
				if s.value[l] != value[i + l] {
					found = false
					break
				}
			}
			if found => return i
		}
		return -1
	}

	func lastIndexOf(s:string):i32 => lastIndexOf(s,size)

	func contains(s:string):bool => indexOf(s) >= 0

	func append(s:string):string {
		var str = new string()
		copy(str.value as pointer,this.value as pointer,size)
		copy(str.value as pointer,s.value as pointer,s.size,0,size)
		return str
	}

	func substring(start:i32):string => substring(start,size)

	func substring(start:i32, end:i32):string {
		var len = (end - start)
		var newString = new string()
		copy(newString.value as pointer,this.value as pointer,len, start)
		return newString
	}

	func clone:string => new string(this)

	func equals(s:string):bool {
		if size != s.size => return false
		for var i=0;i<size;i++  {
			if value[i] != s.value[i] {
				return false
			}
		}
		return true
	}

	property hashCode:i32 {
		get {
			var hash = 1
			var sz = size
			for var i=0;i<sz;i++ {
				hash = (hash * 31) + value[i]
			}
			return hash
		}
	}

	func repeat(count:i32): string {
		var s = new string()
		for var i=0;i<count;i++ {
			for var l=0;l<size;l++ {
				s.value[(i * size) + l] = value[l]
			}
		}
		return s
	}

	operator ==(s:string):bool => equals(s)
	operator !=(s:string):bool => equals(s)==false

	operator +(s:string):string => append(s)
}
