@header(memory.h)
@native(realloc($p, $s))
function realloc(p:any,s:i32):any

@number
@primitive
@native(int)
type i32 { default = 0 }

type List<T> {
	var items: T[]
	var count: i32
	var capacity: i32 = 4

	function add(item: T) {
		resize()
		items[count] = item
		count++
	}

	function resize {
		if count < capacity => return

		capacity *= 2
		this.items = realloc(items as any, capacity * sizeof(T)) as T[]
	}
}

type ListI32 : List<i32> { }

type Map<K, V> {
	var keys: K[]
	var values: V[]
	var count: i32 
	var capacity: i32
}

main {
	var list = new ListI32()
	//var list_list = new List<List<i32>>()
	//var map = new Map<i32, i32>()
}