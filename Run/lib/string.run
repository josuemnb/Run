// VERY IMPORTANT
// DO NOT CHANGE THIS FILE

using system
using primitives

@native(char)
type chars { }

type string: object {
	var value:i8[]
	var hash = -1
	var _size = -1

	property size:i32 {
		get {
			if _size == -1 {
				_size = 0
				for value[_size] => _size++
			}
			return _size
		}
	}

	this { }

	indexer [i:i32]:i8 {
		get => this.value[i]
		set => this.value[i] = value
	}

	this(sz:i32) {
		value = new i8[sz + 1]
		value[sz] = 0
		_size = sz
	}

	@implicit
	this(c:chars) {
		value = c as i8[]
		_size = -1
	}
	this(c:chars, sz:i32) {
		value = c as i8[]
		_size = sz
	}

	this(s:string) {
		_size = s.size
		value = s.value	
	}

	property empty: bool => size == 0

	function indexOf(s:string): i32 => indexOf(s,0)

	function indexOf(s:string, start:i32): i32 {
		for var i=start;i<size - s.size;i++ {
			if s[0]!=value[i] => continue
			if s.size == 1 => return i

			var found = true
			for var l=1;l<s.size;l++ {
				if s[l]!=value[i + l] {
					found = false
					break
				}
			}
			if found => return i
		}
		return -1
	}

	function lastIndexOf(s:string, start:i32): i32 {
		if start > size => start = size
		for var i = start; i >= 0; i-- {
			if s[0] != value[i] => continue
			if s.size == 1 => return i

			var found = true
			for var l=1; l < s.size; l++ {
				if s[l] != value[i + l] {
					found = false
					break
				}
			}
			if found => return i
		}
		return -1
	}

	function lastIndexOf(s:string):i32 => lastIndexOf(s,size)

	function contains(s:string):bool => indexOf(s) >= 0

	function append(s:string):string {
		var str = new string(size + s.size)
		copy(str.value as pointer,this.value as pointer,size)
		copy(str.value as pointer,s.value as pointer,s.size,0,size)
		return str
	}

	function substring(start:i32):string => substring(start,size)

	function substring(start:i32, end:i32):string =>  new string((this.value + start) as chars, end - start)

	//function split(sep:string):array {
	//	var result = new array(sizeof(string))
	//	var start = 0
	//	var index = indexOf(sep)
	//	for index >= 0 {
	//		result.add(substring(start,index) as any)
	//		start = index + sep.size
	//		index = indexOf(sep,start)
	//	}
	//	result.add(substring(start) as any)
	//	return result
	//}

	//function clone:string => new string(this)

	function equals(s:string):bool {
		if s == null => return false
		if size != s.size => return false

		for var i..size => if value[i] != s.value[i] => return false
		return true
	}

	property hashCode:i32 {
		get {
			if hash == -1 {
				hash = 17
				for var i..size => hash = (hash * 31) + value[i]
			}
			return hash
		}
	}

	function repeat(count:i32): string {
		var s = new string()
		for var i..count => for var l..size => s.value[(i * size) + l] = value[l]
		return s
	}

	operator ==(s:string):bool => equals(s)
	operator !=(s:string):bool => equals(s)==false

	operator +(s:string):string => append(s)
}
