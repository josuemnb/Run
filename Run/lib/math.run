// VERY IMPORTANT
// DO NOT CHANGE THIS FILE

//@native(LARGE_INTEGER)
//@header(windows.h)
//type LARGE_INTEGER {
//	var QuadPart: i64
//}
//
//@native(QueryPerformanceCounter($out))
//@header(windows.h)
//function QueryPerformanceCounter(out:LARGE_INTEGER): i32

@native(srand($seed))
@header(stdlib.h)
function srand(seed: i32)

@native(time(NULL):i32)
@header(time.h)
function time(): i32

@native(rand())
@header(stdlib.h)
function rand(): i32

@native(RAND_MAX)
@header(stdlib.h)
var RAND_MAX: i32

type Random {
	this {
		srand(time())
		//var ticks = new LARGE_INTEGER()
		//QueryPerformanceCounter(ticks)
		//srand(ticks.QuadPart as i32)
	}

	static function next:f32 => rand() as f32 / RAND_MAX as f32

	static function next(min:i32, max:i32):i32 => rand() % (max - min) + min

	static function next(seed:i32):i32 => next(0, seed)
}

static type Math {
	static function abs(x:i32):i32 => x < 0 ? -x : x
	static function abs(x:i64):i64 => x < 0 ? -x : x
	static function abs(x:f32):f32 => x < 0 ? -x : x
	static function abs(x:f64):f64 => x < 0 ? -x : x

	static function min(a:i32, b:i32):i32 => a < b ? a : b
	static function min(a:u32, b:u32):u32 => a < b ? a : b
	static function min(a:i64, b:i64):i64 => a < b ? a : b
	static function min(a:u64, b:u64):u64 => a < b ? a : b
	static function min(a:f32, b:f32):f32 => a < b ? a : b
	static function min(a:f64, b:f64):f64 => a < b ? a : b

	static function max(a:i32, b:i32):i32 => a > b ? a : b
	static function max(a:u32, b:u32):u32 => a > b ? a : b
	static function max(a:i64, b:i64):i64 => a > b ? a : b
	static function max(a:u64, b:u64):u64 => a > b ? a : b
	static function max(a:f32, b:f32):f32 => a > b ? a : b	
	static function max(a:f64, b:f64):f64 => a > b ? a : b

	static function pow(a:i32, b:i32):i32 => pow(a as i64, b as i64) as i32
	static function pow(a:i64, b:i64):i64 {
		var result = 1
		for var i = 0; i < b; i++ {
			result *= a
		}
		return result
	}

	static function pow(a:f64, b:f64):f64 {
		var result = 1.0
		for var i = 0; i < b; i++ {
			result *= a
		}
		return result
	}
	static function pow(a:f32, b:f32):f32 => pow(a as f64, b as f64) as f32

	static function sqrt(x:f64):f64 {
		var result = 1.0
		for var i = 0; i < 10; i++ {
			result = (result + x / result) / 2.0
		}
		return result
	}
	static function sqrt(x:f32):f32 => sqrt(x as f64) as f32

	static function sin(x:f64):f64 {
		var result = 0.0
		for var i = 0; i < 10; i++ {
			result += pow(-1.0, i) * pow(x, 2.0 * i + 1.0) / factorial(2 * i + 1)
		}
		return result
	}
	static function sin(x:f32):f32 => sin(x as f64) as f32

	static function cos(x:f64):f64 {
		var result = 0.0
		for var i = 0; i < 10; i++ {
			result += pow(-1.0, i) * pow(x, 2.0 * i) / factorial(2 * i)
		}
		return result
	}
	static function cos(x:f32):f32 => cos(x as f64) as f32

	static function tan(x:f32):f32 => sin(x) / cos(x)
	static function tan(x:f64):f64 => sin(x) / cos(x)

	static function factorial(x:i64):i64 {
		var result = 1
		for var i = 1; i <= x; i++ {
			result *= i
		}
		return result
	}
	static function factorial(x:i32):i32 => factorial(x as i64) as i32

	static function factorial(x:f64):f64 {
		var result = 1.0
		for var i = 1; i <= x; i++ {
			result *= i
		}
		return result
	}
	static function factorial(x:f32):f32 => factorial(x as f64) as f32

	static function log(x:f64):f64 {
		var result = 0.0
		for var i = 1; i <= 10; i++ {
			result += pow(-1.0, i + 1) * pow(x - 1.0, i) / i
		}
		return result
	}
	static function log(x:f32):f32 => log(x as f64) as f32

	static function log10(x:f32):f32 => (log(x as f64) / log(10.0)) as f32
	static function log10(x:f64):f64 => log(x) / log(10.0)

	static function log2(x:f32):f32 => (log(x as f64) / log(2.0)) as f32
	static function log2(x:f64):f64 => log(x) / log(2.0)

	static function log(x:f32, b:f32):f32 => log(x) / log(b)
	static function log(x:f64, b:f64):f64 => log(x) / log(b)

	static function floor(x:f64):f64 {
		var result = x as i64
		if (result > x) {
			result -= 1
		}
		return result as f64
	}
	static function floor(x:f32):f32 => floor(x as f64) as f32

	static function ceil(x:f64):f64 {
		var result = x as i64
		if (result < x) {
			result += 1
		}
		return result as f64
	}
	static function ceil(x:f32):f32 => ceil(x as f64) as f32

	static function round(x:f64):f64 {
		var result = x as i64
		if (x - result >= 0.5) {
			result += 1
		}
		return result as f64
	}
	static function round(x:f32):f32 => round(x as f64) as f32

	static function sign(x:i32):i32 => x < 0 ? -1 : x > 0 ? 1 : 0
	static function sign(x:i64):i64 => x < 0 ? -1 : x > 0 ? 1 : 0
	static function sign(x:f32):f32 => x < 0 ? -1 : x > 0 ? 1 : 0
	static function sign(x:f64):f64 => x < 0 ? -1 : x > 0 ? 1 : 0

	static function clamp(x:i32, min:i32, max:i32):i32 => x < min ? min : x > max ? max : x
	static function clamp(x:i64, min:i64, max:i64):i64 => x < min ? min : x > max ? max : x
	static function clamp(x:f32, min:f32, max:f32):f32 => x < min ? min : x > max ? max : x
	static function clamp(x:f64, min:f64, max:f64):f64 => x < min ? min : x > max ? max : x

	static function clamp01(x:i32):i32 => clamp(x, 0, 1)
	static function clamp01(x:i64):i64 => clamp(x, 0, 1)
	static function clamp01(x:f32):f32 => clamp(x, 0.0, 1.0)
	static function clamp01(x:f64):f64 => clamp(x, 0.0, 1.0)

	static function lerp(a:i32, b:i32, t:f32):i32 => a + (b - a) * t
	static function lerp(a:i64, b:i64, t:f64):i64 => a + (b - a) * t
	static function lerp(a:f32, b:f32, t:f32):f32 => a + (b - a) * t
	static function lerp(a:f64, b:f64, t:f64):f64 => a + (b - a) * t

	static function lerpUnclamped(a:i32, b:i32, t:f32):i32 => a + (b - a) * t
	static function lerpUnclamped(a:i64, b:i64, t:f64):i64 => a + (b - a) * t
	static function lerpUnclamped(a:f32, b:f32, t:f32):f32 => a + (b - a) * t
	static function lerpUnclamped(a:f64, b:f64, t:f64):f64 => a + (b - a) * t

	static function lerpAngle(a:f64, b:f64, t:f64):f64 {
		var delta = repeat(b - a, -180.0, 180.0)
		return a + delta * t
	}
	static function lerpAngle(a:f32, b:f32, t:f32):f32 => lerpAngle(a as f64, b as f64, t as f64) as f32

	static function repeat(t:i64, length:i64):i64 {
		var result = t % length
		if result < 0 {
			result += length
		}
		return result
	}
	static function repeat(t:i32, length:i32):i32 => repeat(t as i64, length as i64) as i32

	static function repeat(t:f64, min:f64, max:f64):f64 {
		var result = repeat(t - min, max - min)
		return result + min
	}
	static function repeat(t:f32, min:f32, max:f32):f32 => repeat(t as f64, min as f64, max as f64) as f32

	static function pingPong(t:f64, length:f64):f64 {
		var result = repeat(t, length * 2.0)
		return length - abs(result - length)
	}
	static function pingPong(t:f32, length:f32):f32 => pingPong(t as f64, length as f64) as f32

	static function pingPong(t:f64, min:f64, max:f64):f64 {
		var result = pingPong(t - min, max - min)
		return result + min
	}
	static function pingPong(t:f32, min:f32, max:f32):f32 => pingPong(t as f64, min as f64, max as f64) as f32

	static function inverseLerp(a:i32, b:i32, value:i32):f32 => (value - a) / (b - a)
	static function inverseLerp(a:i64, b:i64, value:i64):f64 => (value - a) / (b - a)
	static function inverseLerp(a:f32, b:f32, value:f32):f32 => (value - a) / (b - a)
	static function inverseLerp(a:f64, b:f64, value:f64):f64 => (value - a) / (b - a)
}