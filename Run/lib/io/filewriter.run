// VERY IMPORTANT
// DO NOT CHANGE THIS FILE

using filebase
using iwriter

@native(fopen($path,$mode))
@header(stdio.h)
function fopen(path:chars,mode:FileWriterMode):FILE

@native(fwrite($buffer,$size,$count,$fp):i32)
@header(stdio.h)
function fwrite(buffer:pointer,size:i32,count:i32,fp:FILE):i32

@native(fwrite($buffer,$size,$count,$fp):i32)
@header(stdio.h)
function fwrite(buffer:i8[],size:i32,count:i32,fp:FILE):i32

enum FileWriterMode {
	WRITE = "w"
	WRITE_BINARY = "wb"
	APPEND = "a"
	APPEND_BINARY = "ab"
}

type FileWriter: FileBase, IWriter {
	var mode:FileWriterMode

	this(.path,.mode) {
		fp = fopen(path,mode)
		if fp == null {
			panic("FileWriter: Failed to open file")
		}
		opened = true
		ended = 0
	}

	function writeInternal(value:pointer, length:i32, newLine:bool) {
		if ok == false => return
		fwrite(value,length,1,fp)
		if newLine => fwrite("\n" as pointer,1,1,fp)
	}

	function flush() {
		if ok == false => return
		fflush(fp)
	}

	function write(b:byte[], start:i32, count:i32) {
		if ok == false => return
		fwrite((b + start) as pointer,count,1,fp)
	}

	function write(c:chars) => writeInternal(c as pointer, c.size(),false)

	function writeLine(c:chars) => writeInternal(c as pointer, c.size(),true)

	function write(value:i32) => writeInternal(ref value,4,false)

	function write(value:i64) => writeInternal(ref value,8,false)

	function write(value:i16) => writeInternal(ref value,2,false)

	function write(value:i8) => writeInternal(ref value,1,false)

	function write(value:u32) => writeInternal(ref value,4,false)

	function write(value:u64) => writeInternal(ref value,8,false)

	function write(value:u16) => writeInternal(ref value,2,false)

	function write(value:f32) => writeInternal(ref value,4,false)

	function write(value:f64) => writeInternal(ref value,8,false)

	function write(value:string) => writeInternal(value as pointer, value.size,false)

	function writeLine(value:i32) => writeInternal(ref value,4,true)

	function writeLine(value:i64) => writeInternal(ref value,8,true)

	function writeLine(value:i16) => writeInternal(ref value,2,true)

	function writeLine(value:i8) => writeInternal(ref value,1,true)

	function writeLine(value:u32) => writeInternal(ref value,4,true)

	function writeLine(value:u64) => writeInternal(ref value,8,true)

	function writeLine(value:u16) => writeInternal(ref value,2,true)

	function writeLine(value:f32) => writeInternal(ref value,4,true)

	function writeLine(value:f64) => writeInternal(ref value,8,true)

	function writeLine(value:string) => writeInternal(value as pointer, value.size,true)

	function writeLine() {
		if ok == false => return
		fwrite("\n" as pointer,1,1,fp)
	}

	function dispose {
		if ok == false => return
		close()
	}
}
