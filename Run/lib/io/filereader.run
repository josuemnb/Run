// VERY IMPORTANT
// DO NOT CHANGE THIS FILE

using filebase

@native(fopen($path,$mode))
@header(stdio.h)
function fopen(path:chars,mode:FileReaderMode):FILE

@native(fread($buffer,$size,$count,$fp):i32)
@header(stdio.h)
function fread(buffer:pointer,size:i32,count:i32,fp:FILE):i32

@native(fread($buffer,$size,$count,$fp):i32)
@header(stdio.h)
function fread(buffer:i8[],size:i32,count:i32,fp:FILE):i32

enum FileReaderMode {
	READ = "r"
	READ_BINARY = "rb"
}

type FileReader: FileBase {
	var buffer:i8[]
	var capacity:i32
	var readed:i32
	var mode:FileReaderMode

	this(.path,.mode) {
		fp = fopen(path,mode)
		if fp == null {
			panic("File not found")
		}
		opened = fp != null
		ended = 0
	}
		
	function resize(length:i32) {
		if ok == false => return
		if (readed + length) < capacity => return
		readed = 0	
		if length > capacity {
			capacity = length
			buffer = new i8[capacity]
		}
		var sz = fread(buffer, 1, capacity, fp)
		//if(sz < capacity) {
		//	if sz== 0 {
		//		ended = 2
		//	} else {
		//		ended = 1
		//	}
		//	capacity = sz
		//}
	}

	function readI32():i32 => readInternal(4) as i32

	function readU32():u32 => readInternal(4) as u32

	function readI64():i64 => readInternal(8) as i64

	function readI16():i16 => readInternal(2) as i16

	function readI8():i8 => readInternal(1) as i8

	function readU8():u8 => readInternal(1) as u8

	function readString(length:i32):string => readInternal(length) as string

	function readF32():f32 => readInternal(4) as f32

	function readf64():f64 => readInternal(8) as f64

	function read(length:i32):byte[] => readInternal(length) as byte[]

	function read(bytes:byte[], size:i32) {
		if ok == false => return
		resize(size)
		if ended == 2 => return
		defer readed+=size
		copy(bytes, (buffer + readed) as byte[], size)
	}

	function readInternal(length:i32): pointer {
		if ok == false => return null
		resize(length)
		if ended == 2 => return null
		defer readed+=length
		return (buffer + readed)
	}

	function readAll:string {
		if ok == false => return null
		end()
		var size = position
		var bytes = new i8[size + 1]
		begin()
		fread(bytes, 1, size, fp)
		bytes[size] = 0
		return bytes as string	
	}

	function dispose {
		close()
		delete(buffer)
		capacity = 0
		ended = 2
		readed = 0	
	}
}