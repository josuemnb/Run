// VERY IMPORTANT
// DO NOT CHANGE THIS FILE

using filebase

enum FileReaderMode {
	READ = "r"
	READ_BINARY = "rb"
}

type FileReader: FileBase {
	var buffer:byte[]
	var capacity:i32
	var readed:i32
	var mode:FileReaderMode

	this(.path,.mode) {
		fp = fopen(path,mode as chars)
		opened = fp != null
		ended = 0
	}
		
	function resize(length:i32) {
		if ok == false => return
		if readed + length > capacity {
			readed = 0
			if length > capacity {
				capacity = length
				buffer = realloc(buffer as pointer,capacity) as byte[]
			}
			var sz = fread(buffer as pointer, capacity, 1, fp)
			if(sz < capacity) {
				if sz== 0 {
					ended = 2
				} else {
					ended = 1
				}
				capacity = sz
			}
		}
	}

	function readI32():i32 => readInternal(4) as i32

	function readU32():u32 => readInternal(4) as u32

	function readI64():i64 => readInternal(8) as i64

	function readI16():i16 => readInternal(2) as i16

	function readI8():i8 => readInternal(1) as i8

	function readU8():u8 => readInternal(1) as u8

	function readString(length:i32):string => readInternal(length) as string

	function readF32():f32 => readInternal(4) as f32

	function readf64():f64 => readInternal(8) as f64

	function read(length:i32):byte[] => readInternal(length) as byte[]

	function read(bytes:byte[], size:i32) {
		if ok == false => return
		resize(size)
		if ended == 2 => return
		defer readed+=size
		copy(bytes as pointer, (buffer + readed) as pointer, size)
	}

	function readInternal(length:i32): pointer {
		if ok == false => return null
		resize(length)
		if ended == 2 => return null
		defer readed+=length
		return (buffer + readed) as pointer
	}

	function readAll:string {
		if ok == false => return null
		end()
		var size = position
		var bytes = new u8[size]
		begin()
		fread(bytes as pointer, size, 1, fp)
		return bytes as string	
	}

	function dispose {
		close()
		delete(buffer)
		capacity = 0
		ended = 2
		readed = 0	
	}
}