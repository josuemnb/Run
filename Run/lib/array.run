// VERY IMPORTANT
// DO NOT CHANGE THIS FILE

type array {
	var size:i32
	var itemSize:i32
	var capacity:i32
	var items:any[]

	this(.itemSize, .capacity) {
		items = new any[capacity]
		size = 0
	}

	this(itemSize:i32): this(itemSize,8) {}

	indexer [i:i32]:any {
  		get => get(i)
  		set => set(i, value)
  	}
  
  	function set(index:i32, item:any) {
  		if index<0 || index>=size => return
  		items[index] = item
  	}
  
  	function add(item:any) {
  		resize()
  		items[size] = item
  		size++
  	}
  
  	function indexOf(item:any):i32 {
  		for var i=0;i<size;i++ {
  			if items[i] == item {
  				return i
  			}
  		}
  		return -1
  	}
  
  	function contains(item:any):bool => indexOf(item) > -1
  
  	function get(index:i32):any {
  		if index<0 || index>=size => return null
  		return items[index]
  	} 
  
  	function resize() {
  		if size < capacity => return
  		capacity *=2
  		items = realloc(items as pointer, capacity * sizeof(any)) as any[]
  	}
  
  	function dispose() {
  		if size == 0 => return
  		size = 0
  		capacity = 0
  		delete items 
  	}
}