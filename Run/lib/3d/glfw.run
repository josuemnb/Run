// VERY IMPORTANT
// DO NOT CHANGE THIS FILE

library "./../GLFW/lib/glfw3"

@header(GLFW/include/glfw3.h)

@native(GLFWwindow)
type GLFWwindow { } 

@native(GLFWmonitor)
type GLFWmonitor { }

@native(GLFWcursor)
type GLFWcursor { }

@native(GLFWvidmode)
type GLFWvidmode { }

@native(GLFWgammaramp)
type GLFWgammaramp { }

@native(GLFWimage)
type GLFWimage { }

@native(GLFWgamepadstate)
type GLFWgamepadstate { }

@native(GLFWglproc)
type GLFWglproc { }

@native(GLFWvkproc)
type GLFWvkproc { }

@native(GLFWerrorfun)
type GLFWerrorfun { }

@native(GLFWwindowposfun)
type GLFWwindowposfun { }

@native(GLFWwindowsizefun)
type GLFWwindowsizefun { }

@native(GLFWwindowclosefun)
type GLFWwindowclosefun { }

@native(GLFWwindowrefreshfun)
type GLFWwindowrefreshfun { }

@native(GLFWwindowfocusfun)
type GLFWwindowfocusfun { }

@native(GLFWwindowiconifyfun)
type GLFWwindowiconifyfun { }

@native(GLFWframebuffersizefun)
type GLFWframebuffersizefun { }

@native(GLFWmousebuttonfun)
type GLFWmousebuttonfun { }

@native(GLFWcursorposfun)
type GLFWcursorposfun { }

@native(GLFWcursorenterfun)
type GLFWcursorenterfun { }

@native(GLFWscrollfun)
type GLFWscrollfun { }

@native(GLFWkeyfun)
type GLFWkeyfun { }

@native(GLFWcharfun)
type GLFWcharfun { }

@native(GLFWcharmodsfun)
type GLFWcharmodsfun { }

@native(GLFWdropfun)
type GLFWdropfun { }

@native(GLFWmonitorfun)
type GLFWmonitorfun { }

@native(GLFWjoystickfun)
type GLFWjoystickfun { }

@native(glfwInit)
function glfwInit():bool 

@native(glfwCreateWindow($width,$height,$title)
function glfwCreateWindow(width:i32, height:i32, title:string,m:pointer, s:pointer):GLFWwindow

function glfwCreateWindow(width:i32, height:i32, title:string):GLFWwindow => glfwCreateWindow(width, height, title, null, null)

@native(glfwMakeContextCurrent($window))
function glfwMakeContextCurrent(window:GLFWwindow)

@native(glfwWindowShouldClose($window))
function glfwWindowShouldClose(window:GLFWwindow):bool

@native(glfwSwapBuffers($window))
function glfwSwapBuffers(window:GLFWwindow)

@native(glfwPollEvents)
function glfwPollEvents()

@native(glfwTerminate)
function glfwTerminate()

@native(glfwSetKeyCallback($window,$callback))
function glfwSetKeyCallback(window:GLFWwindow, callback:GLFWkeyfun)

@native(glfwSetCursorPosCallback($window,$callback))
function glfwSetCursorPosCallback(window:GLFWwindow, callback:GLFWcursorposfun)

@native(glfwSetMouseButtonCallback($window,$callback))
function glfwSetMouseButtonCallback(window:GLFWwindow, callback:GLFWmousebuttonfun)

@native(glfwSetScrollCallback($window,$callback))
function glfwSetScrollCallback(window:GLFWwindow, callback:GLFWscrollfun)

@native(glfwSetCharCallback($window,$callback))
function glfwSetCharCallback(window:GLFWwindow, callback:GLFWcharfun)

@native(glfwSetWindowCloseCallback($window,$callback))
function glfwSetWindowCloseCallback(window:GLFWwindow, callback:GLFWwindowclosefun)

@native(glfwSetWindowFocusCallback($window,$callback))
function glfwSetWindowFocusCallback(window:GLFWwindow, callback:GLFWwindowfocusfun)

@native(glfwSetWindowIconifyCallback($window,$callback))
function glfwSetWindowIconifyCallback(window:GLFWwindow, callback:GLFWwindowiconifyfun)

@native(glfwSetWindowPosCallback($window,$callback))
function glfwSetWindowPosCallback(window:GLFWwindow, callback:GLFWwindowposfun)

@native(glfwSetWindowSizeCallback($window,$callback))
function glfwSetWindowSizeCallback(window:GLFWwindow, callback:GLFWwindowsizefun)

@native(glfwSetWindowRefreshCallback($window,$callback))
function glfwSetWindowRefreshCallback(window:GLFWwindow, callback:GLFWwindowrefreshfun)

@native(glfwSetFramebufferSizeCallback($window,$callback))
function glfwSetFramebufferSizeCallback(window:GLFWwindow, callback:GLFWframebuffersizefun)

@native(glfwGetPrimaryMonitor)
function glfwGetPrimaryMonitor():GLFWmonitor

@native(glfwGetVideoModes($monitor,$count))
function glfwGetVideoModes(monitor:GLFWmonitor, count:i32):GLFWvidmode

@native(glfwGetVideoMode($monitor))
function glfwGetVideoMode(monitor:GLFWmonitor):GLFWvidmode

@native(glfwGetGammaRamp($monitor))
function glfwGetGammaRamp(monitor:GLFWmonitor):GLFWgammaramp

@native(glfwSetGammaRamp($monitor,$ramp))
function glfwSetGammaRamp(monitor:GLFWmonitor, ramp:GLFWgammaramp)

@native(glfwDefaultWindowHints)
function glfwDefaultWindowHints()

@native(glfwWindowHint($target,$hint))
function glfwWindowHint(target:i32, hint:i32)

@native(glfwDestroyWindow($window))
function glfwDestroyWindow(window:GLFWwindow)

@native(glfwGetWindowAttrib($window,$attrib))
function glfwGetWindowAttrib(window:GLFWwindow, attrib:i32):i32

@native(glfwSetWindowUserPointer($window,$pointer))
function glfwSetWindowUserPointer(window:GLFWwindow, pointer:GLFWwindow)

@native(glfwGetWindowUserPointer($window))
function glfwGetWindowUserPointer(window:GLFWwindow):GLFWwindow

@native(glfwSetWindowPos($window,$xpos,$ypos))
function glfwSetWindowPos(window:GLFWwindow, xpos:i32, ypos:i32)

@native(glfwGetWindowPos($window,$xpos,$ypos))
function glfwGetWindowPos(window:GLFWwindow, xpos:i32, ypos:i32)

@native(glfwSetWindowSize($window,$width,$height))
function glfwSetWindowSize(window:GLFWwindow, width:i32, height:i32)

@native(glfwGetWindowSize($window,$width,$height))
function glfwGetWindowSize(window:GLFWwindow, width:i32, height:i32)

@native(glfwSetWindowAspectRatio($window,$numer,$denom))
function glfwSetWindowAspectRatio(window:GLFWwindow, numer:i32, denom:i32)

@native(glfwSetWindowSizeLimits($window,$minwidth,$minheight,$maxwidth,$maxheight))
function glfwSetWindowSizeLimits(window:GLFWwindow, minwidth:i32, minheight:i32, maxwidth:i32, maxheight:i32)

@native(glfwFocusWindow($window))
function glfwFocusWindow(window:GLFWwindow)

@native(glfwIconifyWindow($window))
function glfwIconifyWindow(window:GLFWwindow)

@native(glfwRestoreWindow($window))
function glfwRestoreWindow(window:GLFWwindow)

@native(glfwShowWindow($window))
function glfwShowWindow(window:GLFWwindow)

@native(glfwHideWindow($window))
function glfwHideWindow(window:GLFWwindow)

@native(glfwGetWindowMonitor($window))
function glfwGetWindowMonitor(window:GLFWwindow):GLFWmonitor

@native(glfwWaitEvents)
function glfwWaitEvents()

@native(glfwGetInputMode($window,$mode))
function glfwGetInputMode(window:GLFWwindow, mode:i32):i32

@native(glfwSetInputMode($window,$mode,$value))
function glfwSetInputMode(window:GLFWwindow, mode:i32, value:i32)

@native(glfwGetKey($window,$key))
function glfwGetKey(window:GLFWwindow, key:i32):i32

@native(glfwGetMouseButton($window,$button))
function glfwGetMouseButton(window:GLFWwindow, button:i32):i32

@native(glfwGetCursorPos($window,$xpos,$ypos))
function glfwGetCursorPos(window:GLFWwindow, xpos:f64, ypos:f64)

@native(glfwSetCursorPos($window,$xpos,$ypos))
function glfwSetCursorPos(window:GLFWwindow, xpos:f64, ypos:f64)

@native(glfwCreateCursor($image,$xhot,$yhot))
function glfwCreateCursor(image:GLFWimage, xhot:i32, yhot:i32):GLFWcursor

@native(glfwCreateStandardCursor($shape))
function glfwCreateStandardCursor(shape:i32):GLFWcursor

@native(glfwDestroyCursor($cursor))
function glfwDestroyCursor(cursor:GLFWcursor)

@native(glfwSetCursor($window,$cursor))
function glfwSetCursor(window:GLFWwindow, cursor:GLFWcursor)

@native(glfwSetCharModsCallback($window,$callback))
function glfwSetCharModsCallback(window:GLFWwindow, callback:GLFWcharmodsfun)

@native(glfwSetDropCallback($window,$callback))
function glfwSetDropCallback(window:GLFWwindow, callback:GLFWdropfun)

@native(glfwJoystickPresent($joy))
function glfwJoystickPresent(joy:i32):bool

@native(glfwGetJoystickAxes($joy,$count))
function glfwGetJoystickAxes(joy:i32, count:i32):f64

@native(glfwGetJoystickButtons($joy,$count))
function glfwGetJoystickButtons(joy:i32, count:i32):i32

@native(glfwGetJoystickName($joy))
function glfwGetJoystickName(joy:i32):string

@native(glfwSetClipboardString($window,$string))
function glfwSetClipboardString(window:GLFWwindow, string:string)

@native(glfwGetClipboardString($window))
function glfwGetClipboardString(window:GLFWwindow):string

@native(glfwGetTime)
function glfwGetTime():f64

@native(glfwSetTime($time))
function glfwSetTime(time:f64)

@native(glfwGetCurrentContext)
function glfwGetCurrentContext():GLFWwindow

@native(glfwSwapInterval($interval))
function glfwSwapInterval(interval:i32)

@native(glfwExtensionSupported($extension))
function glfwExtensionSupported(extension:string):bool

@native(glfwGetProcAddress($procname))
function glfwGetProcAddress(procname:string):GLFWglproc

@native(glfwVulkanSupported)
function glfwVulkanSupported():bool

@native(glfwGetRequiredInstanceExtensions($count))
function glfwGetRequiredInstanceExtensions(count:i32):string

@native(glfwSetWindowShouldClose($window,$value))
function glfwSetWindowShouldClose(window:GLFWwindow, value:bool)

@native(glfwSetWindowTitle($window,$title))
function glfwSetWindowTitle(window:GLFWwindow, title:string)

type Window {
	var _width:i32
	var _height:i32
	var _title:string	
	var _window:GLFWwindow
	var _isVisible:bool

	static var _initialized:bool

	this {
		initialize()
	}

	function initialize {
		if _initialized == false {
			if glfwInit()==false =>  return
			_initialized = true
		}
		_width = 800
		_height = 600
		_title = "Window 3D"
		_window = glfwCreateWindow(_width, _height, _title)
	}

	static function pollEvents => glfwPollEvents()
	static function terminate => glfwTerminate()
	static function swapInterval(ms:i32) => glfwSwapInterval(ms)

	function show  {
		if _isVisible == true || _window == null => return
		_isVisible = true
		glfwShowWindow(_window)
	}

	function hide  {
		if _isVisible == false || _window == null => return
		_isVisible = false
		glfwHideWindow(_window)
	}

	function close {
		glfwDestroyWindow(_window)
		_window = null
	}

	property isClosing:bool => _window!=null ? glfwWindowShouldClose(_window) : true

	function swapBuffers => glfwSwapBuffers(_window)

	function setWidth(w:i32) {
		_width = w
	}

	function setHeight(h:i32) {
		_height = h
	}

	property width:i32 {
		get => _width
		set => setWidth(value)
	}

	property height:i32 {
		get => _height
		set => setHeight(value)
	}

	function setTitle(t:string) {
		if _window == null => return
		_title = t
		glfwSetWindowTitle(_window, t)
	}

	property title:string {
		get => _title
		set => setTitle(value)
	}

	function loop {
		for isClosing == false {
			Window.pollEvents()
			swapBuffers()
			Window.swapInterval(16)
		}
	}
}