interface IAllocator {
	function initialize {}
	function alloc(size: i32): pointer {}
	function free(ptr: pointer) {}
	function realloc(ptr: pointer, size: i32): pointer {}
}

type MemoryPage {
	var items: i32
	var offset: i32
	var size: i32
	var capacity: i32
	var id: i32
	var ptr: pointer
	var next: MemoryPage
	var previous: MemoryPage

	this(.capacity) {
		ptr = alloc(capacity)
	}

	function add(capacity: i32): MemoryPage {
		if capacity <= 1024*1024 => capacity = 1024*1024
		var page = new MemoryPage(capacity)
		page.previous = this
		page.id = id
		next = page
		return page
	}

	property available:i32 => capacity - offset 
}

type PageAlloction {
	var page: MemoryPage
	var ptr: pointer
}

type MemoryInfo {
	var kind: i32
	var size: i32
	var page: MemoryPage
	var magic: i16
	var ptr: pointer
}

static type Allocator: IAllocator {
	static var CurrentPage: MemoryPage
	static var HeadPage: MemoryPage
	static var Magic = 12345

	static function initialize() {
		CurrentPage = new MemoryPage(1024 * 1024)
		HeadPage = CurrentPage
		CurrentPage.id = 0
	}

	static function getAvailablePage(size: i32): MemoryPage {
		var page = HeadPage
		for page != null {
			if page.available >= size => return page
			if page.next == null => break
			page = page.next
		}
		return page.add(size)
	}

	static function alloc(size: i32): pointer {
		var page = getAvailablePage(size)
		var info = setInfo(page, size, 0)
		page.offset += size
		page.items++
		CurrentPage  = page
		return info.ptr
	}

	static function free(ptr: pointer) {
		var info = getInfo(ptr)

		if (info == null) || (info.magic != Magic) => return

		info.page.items--
		info.page.size -= info.size
		info.kind = 0
	}

	static function realloc(ptr: pointer, size: i32): pointer {
		var info = getInfo(ptr)

		if (info == null) || (info.magic != Magic) => return null
		if info.size >= size => return ptr

		info.page.items--
		info.page.size -= info.size
		info.kind = 0
		var newPtr = alloc(size)
		copy(ptr, newPtr, info.size)
		return newPtr
	}

	static function setInfo(page: MemoryPage, size:i32, kind:i32): MemoryInfo {
		var ptr = (page.ptr + page.offset) as pointer
		var p = ptr as MemoryInfo
		p.kind = kind
		p.size = size
		p.page = page
		p.magic = Magic
		p.ptr = (ptr + 14) as pointer
		return p
	}

	static function getInfo(ptr: pointer): MemoryInfo {
		var info = (ptr - 14) as MemoryInfo
		if info.magic != Magic => return null
		return info
	}
}